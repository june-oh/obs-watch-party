---
description: 
globs: 
alwaysApply: true
---
# Project Conventions

This document outlines the coding, naming, and style conventions to be followed across the "Watch Party OBS Timer" project. Adhering to these conventions will help maintain code consistency, readability, and ease of collaboration.

For Git-specific conventions, such as commit messages and branching strategy, please refer to [CONTRIBUTING.md](mdc:CONTRIBUTING.md).

## I. General Conventions

1.  **Primary Language**: All code comments, variable names, and primary documentation (e.g., `README.md`) should be in **English**.
    *   Korean translations for documentation are welcome (e.g., `README.ko.md`).
2.  **Directory Naming**: Use `kebab-case` for all directory names.
    *   Examples: `watch-party-extension`, `obs-timer-server`, `src`, `public`, `icons`
3.  **General File Naming**: Use `kebab-case` for most file names, including scripts, stylesheets, and HTML files.
    *   Examples: `content-script.js`, `main-styles.css`, `popup-page.html`, `generate-icons.py`, `clean-and-build.bat`
    *   **Exceptions**:
        *   Standardized files: `README.md`, `LICENSE`, `CONTRIBUTING.md`, `package.json`, `manifest.json`.
        *   Build outputs: Retain their generated names (e.g., `obs-timer-server.exe`).

## II. Language-Specific Conventions

### A. JavaScript (`.js`)

*   **File Naming**: `kebab-case` (e.g., `content-script.js`, `background-service.js`, `utils.js`).
*   **Variables & Functions**: `camelCase`.
    *   Examples: `let videoElement;`, `function getVideoTitle() {}`
*   **Classes**: `PascalCase`.
    *   Example: `class WebSocketManager {}`
*   **Constants**: `UPPER_SNAKE_CASE`.
    *   Example: `const SERVER_PORT = 3000;`, `const MAX_RETRIES = 5;`
*   **Modules**: Use ES6 modules (`import`/`export`) where appropriate.
*   **Comments**: Use JSDoc-style comments for functions and classes where helpful.

### B. HTML (`.html`)

*   **File Naming**: `kebab-case` (e.g., `popup.html`, `obs-overlay.html`).
*   **Element IDs & Classes**: `kebab-case`.
    *   Example: `<div id="player-controls" class="video-container dark-theme">`
*   **Attributes**: Use double quotes for attribute values.

### C. CSS (`.css`)

*   **File Naming**: `kebab-case` (e.g., `styles.css`, `overlay-theme.css`, `button-component.css`).
*   **Selectors (IDs, Classes)**: `kebab-case`, consistent with HTML.
    *   Example: `#player-controls { ... }`, `.video-container { ... }`
*   **Properties**: Strive for a logical order of properties (e.g., positioning, box model, typography, visual).

### D. JSON (`.json`)

*   **File Naming**:
    *   Project-specific config: `kebab-case` (e.g., `sea-config.json`, `app-settings.json`).
    *   Standard files: `package.json`, `manifest.json`, `config.json`.
*   **Keys**:
    *   For project-specific JSON files (like `config.json`): Prefer `camelCase`.
        *   Example: `{ "serverPort": 3000, "logLevel": "info" }`
    *   For standard files like `package.json` and `manifest.json`, follow their respective schema conventions (often a mix of `camelCase`, `snake_case`, and `kebab-case`).

### E. Python (`.py`)

*   **File Naming**: `kebab-case` (as decided for this project).
    *   Example: `generate-icons.py`, `data-processor.py`
*   **Variables & Functions**: `snake_case`.
    *   Example: `def process_image(file_path, output_size):`
*   **Classes**: `PascalCase`.
    *   Example: `class ImageProcessor:`
*   **Constants**: `UPPER_SNAKE_CASE`.
    *   Example: `DEFAULT_IMAGE_QUALITY = 90`

### F. Batch Scripts (`.bat`)

*   **File Naming**: `kebab-case`.
    *   Example: `clean-and-build.bat`, `start-server.bat`

### G. Markdown (`.md`, `.mdc`)

*   **File Naming**:
    *   Standard files: `README.md`, `CONTRIBUTING.md`, `LICENSE`.
    *   Translated READMEs: `README.ko.md` (or other language codes).
    *   Other content/rule files: `kebab-case.md` or `kebab-case.mdc`.
    *   Example: `setup-guide.md`, `project-conventions.mdc`

## III. Code Formatting & Linting

*   While specific linters and formatters are not strictly enforced project-wide yet, aim for:
    *   Consistent indentation (e.g., 2 or 4 spaces).
    *   Max line length around 100-120 characters where feasible.
    *   Use of tools like Prettier or ESLint for JavaScript is encouraged if working on larger pieces.

This convention guide may evolve. Please refer to the latest version in the `.cursor/rules/` directory.

